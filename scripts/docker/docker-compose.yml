################################################################################
# Stellar - Machine Learning on Graphs

version: '3.4'

networks:
  stellar-net:
    driver: bridge

services:
  ##############################################################################
  # Stellar Ingest - Data ingestion module.
  ingest:
    image: data61/stellar-ingest:0.0.2-SNAPSHOT
    # Example: no env var is currently used by the ingestor
    environment:
      - DEBUG=false
      - SOMEVER=123
    #entrypoint: flask initdb
    #depends_on:
    #  - db
    ports:
      - ${STELLAR_INGEST_REST_PORT}:3000
    volumes:
      - ${STELLAR_INGEST_DATAPATH}:/data/user
    networks:
      - stellar-net
  
  ##############################################################################
  # Stellar Search - Search module.

  search:
    image: data61/stellar-search:0.0.1-SNAPSHOT
    command:
      - "--spring.profiles.active=docker"
      - "--spring.config.location=/etc/stellar-search/"
    volumes:
      - ${STELLAR_SEARCH_APP_CONFIG}/:/etc/stellar-search/:ro
      - ${STELLAR_SEARCH_DATAPATH}:/data/user:ro
    ports:
      - ${STELLAR_SEARCH_REST_PORT}:8080
    depends_on:
      - elasticsearch
      - db
    networks:
      - stellar-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:${STELLAR_SEARCH_ELASTIC_VERSION}
    volumes:
      - ${STELLAR_SEARCH_ELASTIC_CONFIG}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      # yellow (under replicated - which can happen for single node) and green status is considered healthy
      test:
        - CMD-SHELL
        - >
          curl -fs 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=60s&filter_path=status' |
          grep -qE '(green|yellow)' || exit 1
      interval: 1m
      timeout: 60s
      retries: 3
      start_period: 30s
    networks:
      - stellar-net

  db:
    image: postgres:alpine
    volumes:
      - ${STELLAR_DB_INITSCRIPTS}/:/docker-entrypoint-initdb.d/:ro
    restart: always
    environment:
      POSTGRES_PASSWORD: ${STELLAR_DB_PASSWORD} # only for the super user account
      # Don't define POSTGRES_USER, POSTGRES_DB, since multiple modules may want their own
      # DB and user. Instead define per-module roles in /docker-entrypoint-initdb.d/
      # See docker image doco https://hub.docker.com/_/postgres/
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'pg_isready --username "$${POSTGRES_USER}" --dbname "$${POSTGRES_DB}" || exit 1'
      interval: 1m
      timeout: 60s
      retries: 3
      start_period: 30s
    networks:
      - stellar-net

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:${STELLAR_SEARCH_ELASTIC_VERSION}
    volumes:
      - ${STELLAR_SEARCH_KIBANA_CONFIG}/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    healthcheck:
      test:
        # jq is not installed, use a one liner python instead for json parsing
        - CMD-SHELL
        - >
          curl -fs localhost:5601/api/status |
          python -c 'import json,sys;print(json.load(sys.stdin)["status"]["overall"]["state"])' |
          grep  -qE green || false
      interval: 1m
      timeout: 60s
      retries: 3
      start_period: 30s
    networks:
      - stellar-net
    depends_on:
      - elasticsearch
